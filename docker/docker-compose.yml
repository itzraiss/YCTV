version: '3.8'

services:
  # ========================================
  # BACKEND API
  # ========================================
  backend:
    build:
      context: ../backend
      dockerfile: ../docker/Dockerfile.backend
    container_name: streamvault-backend
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - PORT=3000
      - MONGODB_URI=mongodb://mongo:27017/streamvault-brasil
      - REDIS_URL=redis://redis:6379
      - BACKEND_URL=http://localhost:3000
      - FRONTEND_URL=http://localhost:3001
    env_file:
      - ../backend/.env
    depends_on:
      - mongo
      - redis
    volumes:
      - ../backend:/app
      - /app/node_modules
      - ../backend/logs:/app/logs
      - ../backend/public/uploads:/app/public/uploads
    networks:
      - streamvault-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # ========================================
  # FRONTEND WEB
  # ========================================
  frontend:
    build:
      context: ../frontend
      dockerfile: ../docker/Dockerfile.frontend
    container_name: streamvault-frontend
    restart: unless-stopped
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=development
      - REACT_APP_API_URL=http://localhost:3000/api
      - REACT_APP_BACKEND_URL=http://localhost:3000
      - REACT_APP_EMBED_URL=http://localhost:3000/embed
    volumes:
      - ../frontend:/app
      - /app/node_modules
    depends_on:
      - backend
    networks:
      - streamvault-network

  # ========================================
  # MONGODB DATABASE
  # ========================================
  mongo:
    image: mongo:7.0
    container_name: streamvault-mongo
    restart: unless-stopped
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=streamvault123
      - MONGO_INITDB_DATABASE=streamvault-brasil
    volumes:
      - mongo_data:/data/db
      - mongo_config:/data/configdb
      - ./mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - streamvault-network
    command: mongod --auth

  # ========================================
  # REDIS CACHE
  # ========================================
  redis:
    image: redis:7.2-alpine
    container_name: streamvault-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf
    networks:
      - streamvault-network
    command: redis-server /usr/local/etc/redis/redis.conf

  # ========================================
  # NGINX REVERSE PROXY
  # ========================================
  nginx:
    image: nginx:alpine
    container_name: streamvault-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - backend
      - frontend
    networks:
      - streamvault-network

  # ========================================
  # SYNC JOB (Sincronização TMDB)
  # ========================================
  sync-job:
    build:
      context: ../backend
      dockerfile: ../docker/Dockerfile.backend
    container_name: streamvault-sync
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - MONGODB_URI=mongodb://mongo:27017/streamvault-brasil
      - REDIS_URL=redis://redis:6379
      - ENABLE_CRON=true
    env_file:
      - ../backend/.env
    depends_on:
      - mongo
      - redis
    volumes:
      - ../backend/logs:/app/logs
    networks:
      - streamvault-network
    command: node src/jobs/syncCatalog.js daemon

  # ========================================
  # MONITORING
  # ========================================
  
  # Portainer (Gerenciamento de containers)
  portainer:
    image: portainer/portainer-ce:latest
    container_name: streamvault-portainer
    restart: unless-stopped
    ports:
      - "9000:9000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data
    networks:
      - streamvault-network

  # Grafana (Dashboards)
  grafana:
    image: grafana/grafana:latest
    container_name: streamvault-grafana
    restart: unless-stopped
    ports:
      - "3002:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=streamvault123
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - streamvault-network

  # Prometheus (Métricas)
  prometheus:
    image: prom/prometheus:latest
    container_name: streamvault-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - streamvault-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'

# ========================================
# VOLUMES
# ========================================
volumes:
  mongo_data:
    driver: local
  mongo_config:
    driver: local
  redis_data:
    driver: local
  nginx_logs:
    driver: local
  portainer_data:
    driver: local
  grafana_data:
    driver: local
  prometheus_data:
    driver: local

# ========================================
# NETWORKS
# ========================================
networks:
  streamvault-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

---
# ========================================
# DOCKER COMPOSE PARA PRODUÇÃO
# ========================================

# Para usar em produção, execute:
# docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d

version: '3.8'

services:
  backend:
    environment:
      - NODE_ENV=production
      - CLUSTER_WORKERS=4
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '1'
          memory: 1G

  frontend:
    environment:
      - NODE_ENV=production
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '1'
          memory: 1G

  mongo:
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G
        reservations:
          cpus: '1'
          memory: 2G

  redis:
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  nginx:
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 512M